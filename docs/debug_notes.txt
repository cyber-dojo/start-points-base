
Also, the commander scripts cyber_dojo, cyber-dojo-inner and, eg
app/sh/start-point-create.sh have a shebang
#!/bin/bash -Ee
which is a mistake
It should be
#!/usr/bin/env bash
set -Eeu

So on my new Macbook Pro M2 I've had to use chsh to CHange SHell
$ chsh -s /opt/homebrew/bin/bash

All of the .sh files in commander need updating, including cyber-dojo

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Problem seems to be that the file

sh/build_test_derived_images.sh

has a function build_test_custom_image which has this line 104

readonly C1_TMP_DIR=$(create_git_repo_in_TMP_DIR_from custom-yahtzee)

and it should set C1_TMP_DIR to a proper tmp-dir
But it is coming back as

C1_TMP_DIR=/app/tmp

viz, without the trailing specific dir off /tmp

This is coming from create_git_repo_in_TMP_DIR_from()
on line 76 of sh/build_test_derived_images.sh

data_set_name=custom-yahtzee
tmp_dir=/Users/jonathonjagger/repos/cyber-dojo/start-points-base/tmp/CQkY3w
data_dir=/Users/jonathonjagger/repos/cyber-dojo/start-points-base/tmp/CQkY3w/custom-yahtzee
user_id=501

All look ok
Problem was extra debug output!

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Now go to ./build_test_publish.sh  build_test_derived_images()
which gets as far as
sh/build_test_derived_images.sh assertion on L178

BASE_SHA=856011a2d13c78aef29ab68981826591c38e7177 cyberdojo/start-points-base:latest
BASE_SHA=d478ccb36cdbff25bb368506f0b2485c9cc87cc5 cyberdojo/test-custom

1st BASE_SHA=856011a2d13c78aef29ab68981826591c38e7177 is the git commit of the repo
2nd BASE_SHA is from cyberdojo/test-custom  (created 4 mins ago - ok)

    docker run --rm cyberdojo/test-custom sh -c 'echo -n ${BASE_SHA}'

That was from 3 commits back, Dec 1st 2020 !!!
But it _is_ what is set in cyberdojo/versioner

$ docker pull cyberdojo/versioner:latest
$ docker run --rm -it cyberdojo/versioner:latest | grep BASE
CYBER_DOJO_START_POINTS_BASE_IMAGE=cyberdojo/start-points-base
CYBER_DOJO_START_POINTS_BASE_SHA=d478ccb36cdbff25bb368506f0b2485c9cc87cc5
CYBER_DOJO_START_POINTS_BASE_TAG=d478ccb
$ docker run --rm -it cyberdojo/start-points-base:d478ccb bash -c 'cat /etc/issue'
Welcome to Alpine Linux 3.12

!! That is old...

I think the problem may be that there is no call to build_fake_versioner_image
Added that.

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Now getting error from build_test_custom_image()'s call to build the image
"$(cyber_dojo)" start-point create "$(test_image_name)-custom" \
        --custom "file://${C1_TMP_DIR}"

Building cyberdojo/test-custom
...
git clone file:///Users/jonathonjagger/repos/cyber-dojo/start-points-base/tmp/CWmqO7/custom-yahtzee
--custom 	 file:///Users/jonathonjagger/repos/cyber-dojo/start-points-base/tmp/CWmqO7/custom-yahtzee
Dockerfile:4
   2 |     LABEL org.cyber-dojo.start-point=custom
   3 |     COPY . /app/repos
   4 | >>> RUN ruby /app/src/from_script/check_all.rb /app/repos custom
   5 |     ENV IMAGE_TYPE=custom
   6 |     ENV PORT=4526
ERROR: failed to solve: process "/bin/sh -c ruby /app/src/from_script/check_all.rb /app/repos custom" did not complete successfully: exit code: 1

This is coming from commander's app/sh/start-point-create.sh's build_image_from_context_dir() function
I may need to add specific commander env-vars to build_fake_versioner_image() to allow
me to debug this...
Why am I losing line 1 ?
I think it is because commander's start-point-create.sh has build_image_from_context_dir() that does...
  output=$(docker image build --compress --quiet ...)
  echo "${output}" \
      | grep --invert-match 'Step'

and lots of lines are being stripped out... but not lines 2,3,4,5,6 etc
--compress is to compress the build context
--quiet is to supress the build output
Options...
o) get hold the Dockerfile that is being created (in a tmp dir somewhere)
   so I can do just lines 1,2,3 and build an image
o) specify custom commander SHA/TAG that drops the --quiet option
   and also drops the grep --invert match so all the output is seen.
   Feels like a --debug option

Did the latter.
Problem was app/src/from_script/check_visible_filenames.rb L107
unless File.exists?(dir_name + '/' + filename)
needs to be
unless File.exist?(dir_name + '/' + filename)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Now getting...
Checking test-custom-server started cleanly...FAIL
[docker logs test-custom-server]
<docker_log>
Puma starting in single mode...
* Puma version: 6.3.1 (ruby 3.2.2-p53) ("Mugi No Toki Itaru")
*  Min threads: 0
*  Max threads: 5
*  Environment: production
*          PID: 10
* Listening on http://0.0.0.0:4526
Use Ctrl-C to stop
</docker_log>

So now we are into docker_containers_up
Problem is that the cleanly check is looking for 6 lines!
Should change that to a proper first 5 lines check like other repos do.
Done.

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Next problem is old version of MiniTest...
Need to change MiniTest to Minitest
Ok tests now start to run.

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Next problem appears to be /tmp is not writable...
system temporary path is world-writable: /tmp
/tmp is world-writable: /tmp
. is not writable: /app
could not find a temporary directory

Solved that with explicit settings of volumes: - type: tmpfs

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Now tests are running but failing

Running custom tests
Run options: --seed 14778
RackDispatcherTest#test_
hex 'BB1',
-"784: unexpected token at 'sdfsdf'"
+"unexpected token at 'sdfsdf'"

Looks to be a simple difference in produced output.
Fixed.

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Getting a lot of...
WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
Need to fix that.
This seems relevant...
https://stackoverflow.com/questions/72152446/warning-the-requested-images-platform-linux-amd64-does-not-match-the-detecte

Think it might be coming from "docker container run"
in commander/cyber-dojo's create_start_point.sh

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Now getting this...

/app/test/util/check_test_results.rb:49:in `get_index_stats': undefined method `[]' for nil:NilClass (NoMethodError)

    :coverage      => f2(r[1]),
                          ^^^
	from /app/test/util/check_test_results.rb:85:in `<main>'

I think this is because test_X_server/util/check_test_results.rb
all have their own copy of check_test_results.rb
which needs to be updated to handle the output from the newer version of the coverage gem.
Looking at code in
https://github.com/cyber-dojo-tools/check-test-results
Looks like that is also being passed json results.
coverage version is 0.22.0
Need to install...
SimpleCov::Formatter::JSONFormatter installed in coverage.rb
Done that.

Now getting...
Coverage report generated for Minitest to /tmp/coverage. 323 / 323 LOC (100.0%) covered.
Coverage report generated for Minitest to /tmp/coverage/coverage.json. 323 / 323 LOC (100.0%) covered.
(eval):1:in `block in <main>': uninitialized constant NaN (NameError)
	from /app/test/util/check_test_results.rb:209:in `eval'
	from /app/test/util/check_test_results.rb:209:in `block in <main>'
	from /app/test/util/check_test_results.rb:208:in `each'
	from /app/test/util/check_test_results.rb:208:in `<main>'
Coverage report copied to test_custom_server/coverage/

                    tests |      19 !=     0 | true
                 failures |       0 ==     0 | true
                   errors |       0 ==     0 | true
                 warnings |       0 ==     0 | true
                    skips |       0 ==     0 | true
        duration(test)[s] |    0.11 <=     1 | true
         coverage(src)[%] |     0.0 >=   100 | false
        coverage(test)[%] |     0.0 >=   100 | false

Looks like we're not getting coverage values...
Code does this...
  coverage_json['groups'][name]
where name is 'src' and 'test'
and the coverage.json contains...

{
  "timestamp": 1694974287,
  "command_name": "Minitest",
  "groups": {
    "src": {
      "lines": {
        "total": 109,
        "covered": 109,
        "missed": 0
      },
      "branches": {
        "total": null,
        "covered": null,
        "missed": null
      }
    },
    "test": {
      "lines": {
        "total": 214,
        "covered": 214,
        "missed": 0
      },
      "branches": {
        "total": null,
        "covered": null,
        "missed": null
      }
    }
  }
}

So looks like I need to do this instead
  src_stats["lines"]["covered"].to_f

Now working for test_custom_server
Need to do same for test_languages_server, test_exercises_server, test_client

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Now getting to test_scripts
I think these are failing because output now contains lots of warning lines
WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
Eg

::test_bad_args_diagnostics.sh
test_custom_option_requires_image_name
ASSERT:stderr expected:<ERROR: --custom requires preceding <image_name>> but was:<WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested

Can I easily filter these out?
I think I can - because asserts are all in the form
  assert_stderr_equals XXXXX
Fixed by changing
  assertEquals 'stdout' "$1" "`cat ${stdoutF}`"
to
  assertEquals 'stdout' "$1" "`de_warned_cat ${stdoutF}`"

test_bad_args_diagnostics.sh now passes
test_bad_json.sh Fails

using dump_stderr helper from shunit2_helpers.sh
I see that STDOUT (not stderr) contains...

#8 [3/3] RUN ruby /app/src/from_script/check_all.rb /app/repos languages
#8 0.337 ERROR: bad JSON in manifest.json file
#8 0.337 --languages file:///Users/jonathonjagger/repos/cyber-dojo/start-points-base/tmp/JcYR8i/languages_bad_json
#8 0.337 manifest='languages-python-unittest/start_point/manifest.json'
#8 0.337 unexpected token at 'sdfsdf'

Yes that was it...

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Still have commented out contents of
test_data/create_data_set.sh set_permissions_on_target_dir()

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

.github/workflows/main.yml is not correct
start-points-base is not deployed to aws-beta/aws-prod
Fixed.

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

On CI test_client/test_bad_json.sh is failing.
Expected message is not appearing in stdout or stderr.
All I see is
ERROR: failed to solve: process "/bin/sh -c ruby /app/src/from_script/check_all.rb /app/repos languages" did not complete successfully: exit code: 17

Now I see
test_language_manifest
WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
<stdout>
git clone file:///Users/jonathonjagger/repos/cyber-dojo/start-points-base/tmp/pGUMAK/languages_bad_json
--languages 	 file:///Users/jonathonjagger/repos/cyber-dojo/start-points-base/tmp/pGUMAK/languages_bad_json
output
</stdout>
<stderr>
./start-point-create.sh: line 220: exit: 	runtime/asm_arm64.s:1172: numeric argument required
</stderr>
ASSERT:expected output to include ERROR: bad JSON in manifest.json file

!!!!
I think I need to
- upgrade docker-compose in commander
- run snyk to confirm no vulns

Tried that. Still get
./start-point-create.sh: line 220: exit: 	runtime/asm_arm64.s:1172: numeric argument required

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Added set-x to start_point_create.sh created from commander.
It works. Lots more debug output now...
One line that catches my eye is...

#3 [internal] load metadata for docker.io/cyberdojo/start-points-base:bdc1f92

why bdc1f92?
that is the previous commit in start_points_base repo.
Ok. That was because I rebuilt commander first.
Now I get a different failure...
ASSERT:status expected:<17> but was:<2>
Would like to see stdout/stderr for that assert...

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

With set -x in start_point_create.sh getting failure...

#7 [3/3] RUN ruby /app/src/from_script/check_all.rb /app/repos exercises
#7 0.307 ERROR: bad JSON in manifest.json file
#7 0.307 --exercises file:///Users/jonathonjagger/repos/cyber-dojo/start-points-base/tmp/J0UQsh/exercises_bad_json
#7 0.307 manifest='\''exercises-bowling-game/manifest.json'\''
#7 0.307 unexpected token at '\''ggghhhjjj'\''

This is the diagnostic from check_all.rb
The test assert has this...

    "ERROR: bad JSON in manifest.json file"
    "--languages ${tmp_url}"
    "manifest='languages-python-unittest/start_point/manifest.json'"
    "unexpected token at 'sdfsdf'"

So the problem is the extra single-quotes...

I think I need to fix that, and then put in the more robust harvesting
of error messages and exit-code, using known prefix strings.

But I cannot use set-x to force output since start_point_create.sh is
cat'ed to /tmp and run directly by cyber-dojo root script.
So it seems like I need a way to do
    echo "RUN ruby /app/src/from_script/check_all.rb /app/repos $(image_type)"
that is _not_ inside a Dockerfile.
A problem with this is that the image _will_ be built.
So I could build the image with a name including 'tmp' (say)
Then if the command succeeds, I can tag the image,
if the command fails, I can remove the image.

Can now run this...
docker container run --entrypoint= --rm --tty cyberdojo/temporary_start_points ruby /app/src/from_script/check_all.rb exercises

fails with...
/app/src/from_script/check_all.rb:32:in `<main>': undefined method `check_all' for nil:NilClass (NoMethodError)
checker.check_all(root_dir)

Looks like I'm getting a zero exit code when it should be non-zero
Yes. This is the old issue of whether the code is from the 'docker run ... X' or fom the X
https://stackoverflow.com/questions/46300610

Note there is no --rm in the 'docker container run'

$ local -r rand=$(uuidgen)
$ docker container run --name=${rand} --entrypoint= --tty cyberdojo/temporary_start_points ruby /app/src/from_script/check_all.rb exercises
$ exit_code=$(docker inspect ${rand} --format='{{.State.ExitCode}}')
$ docker container rm ${rand}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

All passing on CI except test_script/test_help_message.sh
It gives...
<stderr>
./start-point-create.sh: line 21: ORG: unbound variable
</stderr>

Searching for ORG in commander; found it
app/sh/start-point-create.sh
56:    ORG=https://raw.githubusercontent.com/cyber-dojo
61:          \$(curl --silent ${ORG}/${REPO}/master/start-points/git_repo_urls.all.tagged)

This is from the example help text.
Think it is the
  cat <<- EOF
  ...
EOF
the EOF needs to be single-quoted